// win11depend.tjs
/* 由于无法知道传入参数和内置参数的名称，这里临时用
var_arg和in_var命名来临时代表部分传入参数和内置参数*/

{
	var v0 = "wincorner";
	SystemConfig.WindowCornerPreferenceMenu = [
		%["name"=>"Win11CornerShapeDefaultMenuItem", "caption"=>"システム規定値", "func"=>v0, "group"=>1, "value"=>0],
		%["caption"=>"-"],
		%["name"=>"Win11CornerShapeDoNotRoundMenuItem", "caption"=>"丸めない", "func"=>v0, "group"=>1, "value"=>1],
		%["name"=>"Win11CornerShapeRoundMenuItem", "caption"=>"丸める", "func"=>v0, "group"=>1, "value"=>2],
		%["name"=>"Win11CornerShapeSmallRoundMenuItem", "caption"=>"丸める（小径）", "func"=>v0, "group"=>1, "value"=>3]
	];
}

function UpdateWindowCornerPreferenceMenu(var_arg1,var_arg2) {
	if(var_arg1===void)
	{
		var_arg1=kag.scflags.WindowCornerPreference;
	}

	if(var_arg2===void)
	{
		var_arg2=SystemConfig.WindowCornerPreferenceMenu;
	}

	var_arg1 = (int)+var_arg1;

	if(var_arg2)
	{
		for(var i=0;i<var_arg2.count;i++)
		{
			var in_var1 = var_arg2[i];
			if(in_var1 && (in_var1.value!==void))
			{
				in_var1.checked=(var_arg1==in_var1.value);
			}
		}
	}
}

if(typeof Window.setWindowCornerPreference=="Object"){
	addKagHookCallback(
		"onSetExSystemMenu",
		function (var_arg1){
			var in_var1 = SystemConfig.WindowCornerPreferenceMenu;
			var_arg1.push(%["caption"=>"ウィンドウ角の形状", "name"=>"Win11CornerShapeMenu", "children"=> in_var1]);
		},
		0
	);

	addKagHookCallback(
		"onClickExSystemMenu",
		function (var_arg1){
			if(var_arg1){
				if(var_arg1.func=="wincorner")
				{
					var in_var1 = var_arg1.value;
					scflags.WindowCornerPreference = in_var1;
					UpdateWindowCornerPreferenceMenu(in_var1);
					try
					{
						this.setWindowCornerPreference(in_var1);
					}
					catch{}
					saveSystemVariables();
				}
			}
		},
		1
	);

	addAfterInitCallback(
		function {
			var in_var1 = (int)+kag.scflags.WindowCornerPreference;
			UpdateWindowCornerPreferenceMenu(in_var1);
			try
			{
				kag.setWindowCornerPreference(in_var1);
			}
			catch{}
		}
	);
}
